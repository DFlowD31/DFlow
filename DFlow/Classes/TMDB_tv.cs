// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DFlow.Classes;
//
//    var tmdbTv = TmdbTv.FromJson(jsonString);

namespace LazyPortal.Classes
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Net;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TMDB_tv
    {
        [JsonProperty("page", NullValueHandling = NullValueHandling.Ignore)]
        public long? Page { get; set; }

        [JsonProperty("results", NullValueHandling = NullValueHandling.Ignore)]
        public List<Result> Results { get; set; }

        [JsonProperty("total_pages", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalPages { get; set; }

        [JsonProperty("total_results", NullValueHandling = NullValueHandling.Ignore)]
        public long? TotalResults { get; set; }

        public partial class Result
        {
            [JsonProperty("backdrop_path", NullValueHandling = NullValueHandling.Ignore)]
            public string BackdropPath { get; set; }

            [JsonProperty("first_air_date", NullValueHandling = NullValueHandling.Ignore)]
            public DateTimeOffset? FirstAirDate { get; set; }

            [JsonProperty("genre_ids", NullValueHandling = NullValueHandling.Ignore)]
            public List<long> GenreIds { get; set; }

            [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
            public long? Id { get; set; }

            [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
            public string Name { get; set; }

            [JsonProperty("origin_country", NullValueHandling = NullValueHandling.Ignore)]
            public List<string> OriginCountry { get; set; }

            [JsonProperty("original_language", NullValueHandling = NullValueHandling.Ignore)]
            public string OriginalLanguage { get; set; }

            [JsonProperty("original_name", NullValueHandling = NullValueHandling.Ignore)]
            public string OriginalName { get; set; }

            [JsonProperty("overview", NullValueHandling = NullValueHandling.Ignore)]
            public string Overview { get; set; }

            [JsonProperty("popularity", NullValueHandling = NullValueHandling.Ignore)]
            public double? Popularity { get; set; }

            [JsonProperty("poster_path", NullValueHandling = NullValueHandling.Ignore)]
            public string PosterPath { get; set; }

            [JsonProperty("vote_average", NullValueHandling = NullValueHandling.Ignore)]
            public double? VoteAverage { get; set; }

            [JsonProperty("vote_count", NullValueHandling = NullValueHandling.Ignore)]
            public long? VoteCount { get; set; }
        }
    }

    public partial class TMDB_tv
    {
        public static TMDB_tv FromJson(string json) => JsonConvert.DeserializeObject<TMDB_tv>(json, LazyPortal.Classes.Converter.Settings);
    }

    public class SimpleWebProxy : IWebProxy
    {
        public ICredentials Credentials { get; set; }

        public Uri GetProxy(Uri destination)
        {
            return destination;
        }

        public bool IsBypassed(Uri host)
        {
            // if return true, service will be very slow.
            return false;
        }

        private static SimpleWebProxy defaultProxy = new SimpleWebProxy();
        public static SimpleWebProxy Default
        {
            get
            {
                return defaultProxy;
            }
        }
    }
}
