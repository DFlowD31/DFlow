// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DFlow.Classes;
//
//    var tmdbSeason = TmdbSeason.FromJson(jsonString);

namespace LazyPortal.Classes
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class TMDB_season
    {
        [JsonProperty("_id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("air_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? AirDate { get; set; }

        [JsonProperty("episodes", NullValueHandling = NullValueHandling.Ignore)]
        public List<Episode> Episodes { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("overview", NullValueHandling = NullValueHandling.Ignore)]
        public string Overview { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? TmdbSeasonId { get; set; }

        [JsonProperty("poster_path", NullValueHandling = NullValueHandling.Ignore)]
        public string PosterPath { get; set; }

        [JsonProperty("season_number", NullValueHandling = NullValueHandling.Ignore)]
        public long? SeasonNumber { get; set; }
    }

    public partial class Episode
    {
        [JsonProperty("air_date", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? AirDate { get; set; }

        [JsonProperty("episode_number", NullValueHandling = NullValueHandling.Ignore)]
        public long? EpisodeNumber { get; set; }

        [JsonProperty("crew", NullValueHandling = NullValueHandling.Ignore)]
        public List<Crew> Crew { get; set; }

        [JsonProperty("guest_stars", NullValueHandling = NullValueHandling.Ignore)]
        public List<Crew> GuestStars { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("overview", NullValueHandling = NullValueHandling.Ignore)]
        public string Overview { get; set; }

        [JsonProperty("production_code", NullValueHandling = NullValueHandling.Ignore)]
        public string ProductionCode { get; set; }

        [JsonProperty("season_number", NullValueHandling = NullValueHandling.Ignore)]
        public long? SeasonNumber { get; set; }

        [JsonProperty("still_path", NullValueHandling = NullValueHandling.Ignore)]
        public string StillPath { get; set; }

        [JsonProperty("vote_average", NullValueHandling = NullValueHandling.Ignore)]
        public double? VoteAverage { get; set; }

        [JsonProperty("vote_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? VoteCount { get; set; }
    }

    public partial class Crew
    {
        [JsonProperty("job", NullValueHandling = NullValueHandling.Ignore)]
        public string Job { get; set; }

        [JsonProperty("department", NullValueHandling = NullValueHandling.Ignore)]
        public Department? Department { get; set; }

        [JsonProperty("credit_id", NullValueHandling = NullValueHandling.Ignore)]
        public string CreditId { get; set; }

        [JsonProperty("adult", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Adult { get; set; }

        [JsonProperty("gender", NullValueHandling = NullValueHandling.Ignore)]
        public long? Gender { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public long? Id { get; set; }

        [JsonProperty("known_for_department", NullValueHandling = NullValueHandling.Ignore)]
        public Department? KnownForDepartment { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("original_name", NullValueHandling = NullValueHandling.Ignore)]
        public string OriginalName { get; set; }

        [JsonProperty("popularity", NullValueHandling = NullValueHandling.Ignore)]
        public double? Popularity { get; set; }

        [JsonProperty("profile_path")]
        public string ProfilePath { get; set; }

        [JsonProperty("character", NullValueHandling = NullValueHandling.Ignore)]
        public string Character { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public long? Order { get; set; }
    }

    public enum Department { Acting, Art, Camera, CostumeMakeUp, Crew, Directing, Editing, Lighting, Production, Sound, VisualEffects, Writing };

    public partial class TMDB_season
    {
        public static TMDB_season FromJson(string json) => JsonConvert.DeserializeObject<TMDB_season>(json, LazyPortal.Classes.Converter.Settings);
    }

    internal class DepartmentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Department) || t == typeof(Department?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Acting":
                    return Department.Acting;
                case "Art":
                    return Department.Art;
                case "Camera":
                    return Department.Camera;
                case "Costume & Make-Up":
                    return Department.CostumeMakeUp;
                case "Crew":
                    return Department.Crew;
                case "Directing":
                    return Department.Directing;
                case "Editing":
                    return Department.Editing;
                case "Lighting":
                    return Department.Lighting;
                case "Production":
                    return Department.Production;
                case "Sound":
                    return Department.Sound;
                case "Visual Effects":
                    return Department.VisualEffects;
                case "Writing":
                    return Department.Writing;
            }
            throw new Exception("Cannot unmarshal type Department");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Department)untypedValue;
            switch (value)
            {
                case Department.Acting:
                    serializer.Serialize(writer, "Acting");
                    return;
                case Department.Art:
                    serializer.Serialize(writer, "Art");
                    return;
                case Department.Camera:
                    serializer.Serialize(writer, "Camera");
                    return;
                case Department.CostumeMakeUp:
                    serializer.Serialize(writer, "Costume & Make-Up");
                    return;
                case Department.Crew:
                    serializer.Serialize(writer, "Crew");
                    return;
                case Department.Directing:
                    serializer.Serialize(writer, "Directing");
                    return;
                case Department.Editing:
                    serializer.Serialize(writer, "Editing");
                    return;
                case Department.Lighting:
                    serializer.Serialize(writer, "Lighting");
                    return;
                case Department.Production:
                    serializer.Serialize(writer, "Production");
                    return;
                case Department.Sound:
                    serializer.Serialize(writer, "Sound");
                    return;
                case Department.VisualEffects:
                    serializer.Serialize(writer, "Visual Effects");
                    return;
                case Department.Writing:
                    serializer.Serialize(writer, "Writing");
                    return;
            }
            throw new Exception("Cannot marshal type Department");
        }

        public static readonly DepartmentConverter Singleton = new DepartmentConverter();
    }
}
